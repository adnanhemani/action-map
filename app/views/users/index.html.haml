%h1 HOME PAGE

= javascript_include_tag 'http://media.twiliocdn.com/sdk/js/client/releases/1.3.16/twilio.js'
= javascript_include_tag 'https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'


= link_to "Log In", login_user_path

%table#users
    %tbody
        - @users.each do |user|
            %tr
                %td= link_to "Edit #{user.username}", edit_user_path(user)

= link_to 'Create new account', new_user_path

= form_tag '/call' do
    = field_set_tag do
        = label_tag :phone_number, 'Phone Number:'
        = text_field_tag :phone_number
        = submit_tag 'Call'

<button onclick="callCustomer('9083476839')" type="button" class="btn btn-primary btn-lg call-customer-button">

:javascript
    var callStatus = $("#call-status");
    var answerButton = $(".answer-button");
    var callSupportButton = $(".call-support-button");
    var hangUpButton = $(".hangup-button");
    var callCustomerButtons = $(".call-customer-button");
    
    /* Helper function to update the call status bar */
    function updateCallStatus(status) {
      callStatus.text(status);
    }
    
    /* Get a Twilio Client token with an AJAX request */
    $(document).ready(function() {
      $.post("/token/generate", {page: window.location.pathname}, function(data) {
        // Set up the Twilio Client Device with the token
        Twilio.Device.setup(data.token);
      });
    });
    
    /* Callback to let us know Twilio Client is ready */
    Twilio.Device.ready(function (device) {
      updateCallStatus("Ready");
    });
    
    /* Report any errors to the call status display */
    Twilio.Device.error(function (error) {
      updateCallStatus("ERROR: " + error.message);
    });
    
    /* Callback for when Twilio Client initiates a new connection */
    Twilio.Device.connect(function (connection) {
      // Enable the hang up button and disable the call buttons
      hangUpButton.prop("disabled", false);
      callCustomerButtons.prop("disabled", true);
      callSupportButton.prop("disabled", true);
      answerButton.prop("disabled", true);
    
      // If phoneNumber is part of the connection, this is a call from a
      // support agent to a customer's phone
      if ("phoneNumber" in connection.message) {
        updateCallStatus("In call with " + connection.message.phoneNumber);
      } else {
        // This is a call from a website user to a support agent
        updateCallStatus("In call with support");
      }
    });
    
    /* Callback for when a call ends */
    Twilio.Device.disconnect(function(connection) {
      // Disable the hangup button and enable the call buttons
      hangUpButton.prop("disabled", true);
      callCustomerButtons.prop("disabled", false);
      callSupportButton.prop("disabled", false);
    
      updateCallStatus("Ready");
    });
    
    /* Callback for when Twilio Client receives a new incoming call */
    Twilio.Device.incoming(function(connection) {
      updateCallStatus("Incoming support call");
    
      // Set a callback to be executed when the connection is accepted
      connection.accept(function() {
        updateCallStatus("In call with customer");
      });
    
      // Set a callback on the answer button and enable it
      answerButton.click(function() {
        connection.accept();
      });
      answerButton.prop("disabled", false);
    });
    
    /* Call a customer from a support ticket */
    function callCustomer(phoneNumber) {
      updateCallStatus("Calling " + phoneNumber + "...");
    
      var params = {"phoneNumber": phoneNumber};
      Twilio.Device.connect(params);
    }
    
    /* Call the support_agent from the home page */
    function callSupport() {
      updateCallStatus("Calling support...");
    
      // Our backend will assume that no params means a call to support_agent
      Twilio.Device.connect();
    }
    
    /* End a call */
    function hangUp() {
      Twilio.Device.disconnectAll();
    }
    
    Twilio.Device.setup()